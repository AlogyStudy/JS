小小相册：

访问网址：
http://127.0.0.1/
就能列出所有的文件夹。

点击一个文件夹，就能跳转到网址
http://127.0.0.1/albums/阿猫阿狗
这个页面上显示了所有的图片。

用户想要上传图片：
http://127.0.0.1/upload

用户想要管理文件夹
http://127.0.0.1/admin

-------------------------------------------------------

数据之间传输---参数，this，变量，callback，return。

-------------------------------------------------------

package.json

创建依赖 
	express
 

//根目录 
app.js  //文件路口


设置默认的中间件
	app.use(function( req,res,next ){ res.status(200) ;  res.set('Content-Type': text/html;charset=utf8); next

();});

把静态化放在 404 语句执行之前
app.use( express.static('statics') );

这是404 页面
app.use(function( req,res ){
 
});

------------------------------------------------------

views 视图
	-- 视图文件中的路径，寻找static文件。 需要从根目录寻找


-------------------------------------------------------
和数据相关的 ，文件读取，path处理，都放置在module中执行。
文件引入到view中，返回数据到view中。
	使用回调函数，如果一个函数中有异步语句，需要数据，使用回调函数。


图片也需要静态化出来。

静态化文件，是该文件里面的所有文件静态化。

文件处理文件和文件夹.

	
迭代器：
	强行把异步语句变成同步。
	

for( var i=0; i<3; i++ ){
	setTimeout(function(){
  	console.log(i);
  },0);
}

---------

(function iter(i){
	var timer= setTimeout(function(){
		
	//递归出口
	if( i>10 ){
		clearTimeout(timer);
		return ;
	}
	//递归点 
	iter(i+1);	
  },0);
  
})(0);

---------

for( let i=0; i<3; i++ ){
	setTimeout(function(){
    	console.log(i);
	},0);
}


---------

// 递归
(function iterator(i){

//递归出口
if( i>dongxi.length-1 ){
	return ;
}
//递归程序
fs.stat('./albums/'+dongxi[i],function( err,stats ){

	if ( stats.mode == 16822 ){

		reslut.push( dongxi[i] );

		console.log(reslut);

	}

	//递归点
	iterator(i+1);

});

})(0);




-------------------------------------------------------

函数能够给你什么。
函数想知道什么。

看函数如何封装

